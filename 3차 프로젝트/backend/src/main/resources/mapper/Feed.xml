<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="fs.human.yabab.feed.dao.FeedDAO">

    <!-- 피드 목록 조회 (기존과 동일) -->
    <select id="selectFeedList" parameterType="map" resultType="fs.human.yabab.feed.vo.FeedVO">
        SELECT
        f.FEED_ID,
        f.USER_ID,
        u.USER_NICKNAME AS userNickname,
        f.CREATED_DATE,
        f.FEED_TITLE,
        f.FEED_CATEGORY,
        f.FEED_VIEWS,
        f.FEED_LIKES,
        (
        SELECT COUNT(*)
        FROM TB_FEED_COMMENT c
        WHERE c.FEED_ID = f.FEED_ID
        AND c.COMMENT_DELETED_FLAG = 0
        ) AS feedCommentCount
        FROM TB_FEED f
        JOIN TB_USER u ON f.USER_ID = u.USER_ID
        WHERE f.TEAM_ID = #{teamId}
        AND f.FEED_CATEGORY = #{category}
        AND f.FEED_DELETED_FLAG = 0
        <choose>
            <when test="sort == 'likes'">
                ORDER BY f.FEED_LIKES DESC
            </when>
            <otherwise>
                ORDER BY f.CREATED_DATE DESC
            </otherwise>
        </choose>
    </select>

    <!-- 피드 등록 (기존과 동일) -->
    <insert id="insertFeed" parameterType="fs.human.yabab.feed.vo.FeedVO">
        INSERT INTO TB_FEED (
        FEED_ID,
        TEAM_ID,
        USER_ID,
        FEED_TITLE,
        FEED_CONTENT,
        FEED_CATEGORY,
        FEED_IMAGE_PATH,
        FEED_IMAGE_NAME,
        CREATED_DATE,
        CREATED_BY,
        FEED_VIEWS,
        FEED_LIKES,
        FEED_COMMENT_COUNT,
        FEED_DELETED_FLAG
        ) VALUES (
        SEQ_FEED_ID.NEXTVAL,
        #{teamId},
        #{userId},
        #{feedTitle},
        #{feedContent},
        #{feedCategory},
        #{feedImagePath, jdbcType=VARCHAR},
        #{feedImageName, jdbcType=VARCHAR},
        SYSDATE,
        #{userId},
        0, 0, 0, 0
        )
    </insert>

    <!-- 피드 상세 (TEAM_ID 컬럼 추가) -->
    <select id="selectFeedDetail" resultType="fs.human.yabab.feed.vo.FeedVO">
        SELECT
        f.FEED_ID,
        f.USER_ID,
        u.USER_NICKNAME AS userNickname,
        f.FEED_TITLE,
        f.FEED_CONTENT,
        f.FEED_CATEGORY,
        f.FEED_IMAGE_PATH,
        f.FEED_IMAGE_NAME,
        f.FEED_LIKES,
        f.FEED_VIEWS,
        f.FEED_COMMENT_COUNT,
        f.CREATED_DATE,
        f.TEAM_ID  <!-- ⭐ 이 부분을 추가했습니다! ⭐ -->
        FROM TB_FEED f
        JOIN TB_USER u ON f.USER_ID = u.USER_ID
        WHERE f.FEED_ID = #{feedId}
        AND f.FEED_DELETED_FLAG = 0
    </select>

    <!-- 게시글 추천 관련 쿼리들 (기존과 동일) -->
    <select id="hasUserLikedFeed" resultType="int">
        SELECT COUNT(*)
        FROM TB_FEED_LIKE
        WHERE FEED_ID = #{feedId}
        AND USER_ID = #{userId}
    </select>

    <insert id="insertFeedLike">
        INSERT INTO TB_FEED_LIKE (FEED_ID, USER_ID)
        VALUES (#{feedId}, #{userId})
    </insert>

    <delete id="deleteFeedLike">
        DELETE FROM TB_FEED_LIKE
        WHERE FEED_ID = #{feedId} AND USER_ID = #{userId}
    </delete>

    <update id="incrementFeedLikes">
        UPDATE TB_FEED
        SET FEED_LIKES = FEED_LIKES + 1
        WHERE FEED_ID = #{feedId}
    </update>

    <update id="decrementFeedLikes">
        UPDATE TB_FEED
        SET FEED_LIKES = CASE WHEN FEED_LIKES > 0 THEN FEED_LIKES - 1 ELSE 0 END
        WHERE FEED_ID = #{feedId}
    </update>

    <!-- 댓글 목록 (기존과 동일) -->
    <select id="selectCommentsByFeedId" resultType="fs.human.yabab.feed.vo.CommentVO">
        SELECT
        c.COMMENT_ID,
        c.FEED_ID,
        c.USER_ID,
        u.USER_NICKNAME,
        c.COMMENT_CONTENT,
        c.CREATED_DATE,
        c.COMMENT_LIKES AS commentLikes,
        CASE
        WHEN c.COMMENT_ID IN(
        SELECT COMMENT_ID
        FROM (
        SELECT COMMENT_ID
        FROM TB_FEED_COMMENT
        WHERE FEED_ID = #{feedId}
        ORDER BY COMMENT_LIKES DESC, CREATED_DATE ASC
        )
        WHERE ROWNUM &lt;= 4
        ) THEN 1
        ELSE 0
        END AS commentBest
        FROM TB_FEED_COMMENT c
        JOIN TB_USER u ON c.USER_ID = u.USER_ID
        WHERE c.FEED_ID = #{feedId}
        AND c.COMMENT_DELETED_FLAG = 0
        ORDER BY c.CREATED_DATE DESC
    </select>

    <!-- 댓글 추가 (기존과 동일) -->
    <insert id="insertComment" parameterType="fs.human.yabab.feed.vo.CommentVO">
        INSERT INTO TB_FEED_COMMENT (
        COMMENT_ID,
        FEED_ID,
        USER_ID,
        COMMENT_CONTENT,
        CREATED_DATE
        ) VALUES (
        SEQ_FEED_COMMENT_ID.NEXTVAL,
        #{feedId},
        #{userId, jdbcType=VARCHAR},
        #{commentContent, jdbcType=VARCHAR},
        SYSDATE
        )
    </insert>

    <!-- 댓글 추천 관련 쿼리들 (기존과 동일) -->
    <select id="hasUserLikedComment" resultType="boolean">
        SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END
        FROM TB_COMMENT_LIKE
        WHERE COMMENT_ID = #{commentId}
        AND USER_ID = #{userId}
    </select>

    <insert id="insertCommentLike">
        INSERT INTO TB_COMMENT_LIKE (COMMENT_ID, USER_ID)
        VALUES (#{commentId}, #{userId})
    </insert>

    <delete id="deleteCommentLike">
        DELETE FROM TB_COMMENT_LIKE
        WHERE COMMENT_ID = #{commentId} AND USER_ID = #{userId}
    </delete>

    <update id="incrementCommentLikes">
        UPDATE TB_FEED_COMMENT
        SET COMMENT_LIKES = COMMENT_LIKES + 1
        WHERE COMMENT_ID = #{commentId}
    </update>

    <update id="decrementCommentLikes">
        UPDATE TB_FEED_COMMENT
        SET COMMENT_LIKES = CASE
        WHEN COMMENT_LIKES > 0 THEN COMMENT_LIKES - 1
        ELSE 0
        END
        WHERE COMMENT_ID = #{commentId}
    </update>

    <select id="countLikesForComment" resultType="int">
        SELECT COUNT(*)
        FROM TB_COMMENT_LIKE
        WHERE COMMENT_ID = #{commentId}
    </select>

    <!-- 조회수 (기존과 동일) -->
    <update id="incrementFeedViews">
        UPDATE TB_FEED
        SET FEED_VIEWS = FEED_VIEWS + 1
        WHERE FEED_ID = #{feedId}
    </update>

    <!-- Top 5 피드 조회 (기존과 동일) -->
    <select id="selectTop5FeedsByTeamAndCategory" resultType="fs.human.yabab.feed.vo.FeedVO">
        SELECT
        f.FEED_ID,
        f.FEED_TITLE,
        f.FEED_LIKES
        FROM TB_FEED f
        JOIN TB_USER u ON f.USER_ID = u.USER_ID
        WHERE f.TEAM_ID = #{teamId}
        AND f.FEED_CATEGORY = #{category}
        AND f.FEED_DELETED_FLAG = 0
        ORDER BY f.FEED_LIKES DESC
        FETCH FIRST 5 ROWS ONLY
    </select>

    <!-- 댓글 내용 수정 (기존과 동일) -->
    <update id="updateCommentContent">
        UPDATE TB_FEED_COMMENT
        SET COMMENT_CONTENT = #{commentContent}
        WHERE COMMENT_ID = #{commentId}
        AND COMMENT_DELETED_FLAG = 0
    </update>

    <!-- 댓글 삭제 (소프트 삭제) (기존과 동일) -->
    <update id="softDeleteComment">
        UPDATE TB_FEED_COMMENT
        SET COMMENT_DELETED_FLAG = 1
        WHERE COMMENT_ID = #{commentId}
    </update>

    <!-- 피드 삭제 (소프트 삭제) (기존과 동일) -->
    <update id="markFeedAsDeleted">
        UPDATE TB_FEED
        SET FEED_DELETED_FLAG = 1
        WHERE FEED_ID = #{feedId}
    </update>

    <!-- 피드 수정 (기존과 동일) -->
    <update id="updateFeed" parameterType="map">
        UPDATE TB_FEED
        SET
        FEED_TITLE = #{feedTitle},
        FEED_CONTENT = #{feedContent},
        UPDATED_DATE = SYSDATE,
        UPDATED_BY = #{userId}
        <choose>
            <when test="feedImagePath != null and feedImageName != null and feedImagePath != ''">
                -- 새로운 이미지가 업로드되거나 기존 이미지를 유지하는 경우
                , FEED_IMAGE_PATH = #{feedImagePath, jdbcType=VARCHAR}
                , FEED_IMAGE_NAME = #{feedImageName, jdbcType=VARCHAR}
            </when>
            <when test="feedImagePath == null and feedImageName == null">
                -- 이미지를 삭제하는 경우 (NULL로 설정)
                , FEED_IMAGE_PATH = NULL
                , FEED_IMAGE_NAME = NULL
            </when>
        </choose>
        WHERE FEED_ID = #{feedId}
        AND USER_ID = #{userId}
    </update>

    <!-- 새로 추가된 쿼리: 피드 관련 모든 댓글 물리적 삭제 (기존과 동일) -->
    <delete id="hardDeleteFeedCommentsByFeedId">
        DELETE FROM TB_FEED_COMMENT
        WHERE FEED_ID = #{feedId}
    </delete>

    <!-- 새로 추가된 쿼리: 피드 관련 모든 추천 기록 물리적 삭제 (기존과 동일) -->
    <delete id="hardDeleteFeedLikesByFeedId">
        DELETE FROM TB_FEED_LIKE
        WHERE FEED_ID = #{feedId}
    </delete>

    <!-- 새로 추가된 쿼리: 피드 물리적 삭제 (기존과 동일) -->
    <delete id="hardDeleteFeedById">
        DELETE FROM TB_FEED
        WHERE FEED_ID = #{feedId}
    </delete>

</mapper>
